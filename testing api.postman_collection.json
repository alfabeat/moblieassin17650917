{
	"info": {
		"_postman_id": "58b21a23-ed21-48a1-9ad4-59c7bd4b4f26",
		"name": "testing api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32747228"
	},
	"item": [
		{
			"name": "localhost:3000/api/login",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"pm.collectionVariables.set(\"authToken\", jsonData.accessToken);",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Access token is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.accessToken).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Access token is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.accessToken).to.be.a('string').and.to.match(/[A-Za-z0-9]+/);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "test",
							"type": "text"
						},
						{
							"key": "password",
							"value": "test",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "localhost:3000/api/login",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:3000/api/admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - status and message\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('status');",
							"    pm.expect(responseData).to.have.property('message');",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "localhost:3000/api/admin",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"admin"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:3000/api/save",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"let jsonData = pm.response.json();",
							"pm.collectionVariables.set(\"testingid\", jsonData.result._id);",
							"",
							"pm.test('Response status code is 201', function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"})",
							"",
							"pm.test('Title, artist, album, and genre are non-empty strings', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.result.title).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Title should not be empty');",
							"    pm.expect(responseData.result.artist).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Artist should not be empty');",
							"    pm.expect(responseData.result.album).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Album should not be empty');",
							"    pm.expect(responseData.result.genre).to.be.a('array').and.to.have.lengthOf.at.least(1, 'Genre should not be empty');",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "title",
							"value": "part",
							"type": "text"
						},
						{
							"key": "artist",
							"value": "will",
							"type": "text"
						},
						{
							"key": "album",
							"value": "willsal",
							"type": "text"
						},
						{
							"key": "genre",
							"value": "pop, rap",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "localhost:3000/api/save",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"save"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:3000/api/gettitle",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test('Response status code is 200', function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							"",
							"pm.test('Content-Type is application/json', function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"})",
							"",
							"pm.test('Validate the result object', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.result).to.be.an('object');",
							"    pm.expect(responseData.result._id).to.be.a('string');",
							"    pm.expect(responseData.result.title).to.be.a('string');",
							"    pm.expect(responseData.result.artist).to.be.a('string');",
							"    pm.expect(responseData.result.album).to.be.a('string');",
							"    pm.expect(responseData.result.genre).to.be.a('array');",
							"    pm.expect(responseData.result.createdAt).to.be.a('string');",
							"    pm.expect(responseData.result.updatedAt).to.be.a('string');",
							"    pm.expect(responseData.result.__v).to.be.a('number');",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "title",
							"value": "part",
							"type": "text"
						},
						{
							"key": "artist",
							"value": "will",
							"type": "text"
						},
						{
							"key": "album",
							"value": "willsal",
							"type": "text"
						},
						{
							"key": "genre",
							"value": "pop",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "localhost:3000/api/gettitle",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"gettitle"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:3000/api/getall",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Success field is present and has a boolean value\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.have.property('success').that.is.a('boolean');",
							"});",
							"",
							"",
							"pm.test(\"Result is an array with at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.result).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Each element in the 'result' array has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.result).to.be.an('array');",
							"    responseData.result.forEach(function(item) {",
							"        pm.expect(item).to.include.all.keys('_id', 'title', 'artist', 'album', 'genre', 'createdAt', 'updatedAt', '__v');",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/api/getall",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"getall"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:3000/api/edit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('Content-Type header is application/json', function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"})",
							"",
							"pm.test('Validate the result object', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.result).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.result._id).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.result.title).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.result.artist).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.result.album).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.result.genre).to.exist.and.to.be.a('array');",
							"    pm.expect(responseData.result.createdAt).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.result.updatedAt).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.result.__v).to.exist.and.to.be.a('number');",
							"})",
							"",
							"pm.test('Success field should be true', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.success).to.equal(true);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "title",
							"value": "partmusic",
							"type": "text"
						},
						{
							"key": "artist",
							"value": "will",
							"type": "text"
						},
						{
							"key": "album",
							"value": "willsal",
							"type": "text"
						},
						{
							"key": "genre",
							"value": "pop",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "localhost:3000/api/edit?_id={{testingid}}",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"edit"
					],
					"query": [
						{
							"key": "_id",
							"value": "{{testingid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:3000/api/delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test('Response status code is 200', function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							"",
							"pm.test('Content-Type is application/json', function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"})",
							"",
							"pm.test('Success field is present in the response', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property('success');",
							"})",
							"",
							"pm.test('Message field is a non-empty string', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Message should not be empty');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "x-access-token",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "title",
							"value": "partmusic",
							"type": "text"
						},
						{
							"key": "artist",
							"value": "will",
							"type": "text"
						},
						{
							"key": "album",
							"value": "willsal",
							"type": "text"
						},
						{
							"key": "genre",
							"value": "pop",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "localhost:3000/api/delete?_id={{testingid}}",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"delete"
					],
					"query": [
						{
							"key": "_id",
							"value": "{{testingid}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "authToken",
			"value": "",
			"type": "default"
		},
		{
			"key": "testingid",
			"value": ""
		}
	]
}